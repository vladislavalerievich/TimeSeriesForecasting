import argparse
import logging
import os
from typing import Dict

from src.synthetic_generation.dataset_composer import DatasetComposer
from src.synthetic_generation.kernel_generator_wrapper import KernelGeneratorWrapper
from src.synthetic_generation.lmc_generator_wrapper import LMCGeneratorWrapper

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Generate synthetic time series datasets for training and validation."
    )

    parser.add_argument(
        "--output_dir",
        type=str,
        default="data/synthetic",
        help="Directory to save the generated datasets",
    )

    parser.add_argument(
        "--train_batches",
        type=int,
        default=100,
        help="Number of batches for the training dataset",
    )

    parser.add_argument(
        "--val_batches",
        type=int,
        default=20,
        help="Number of batches for the validation dataset",
    )

    parser.add_argument(
        "--batch_size",
        type=int,
        default=32,
        help="Number of time series per batch",
    )

    parser.add_argument(
        "--seed",
        type=int,
        default=42,
        help="Global random seed for reproducibility",
    )

    parser.add_argument(
        "--history_length",
        type=str,
        default="64,256",
        help="History length range (min,max) or fixed value",
    )

    parser.add_argument(
        "--target_length",
        type=str,
        default="32,256",
        help="Target length range (min,max) or fixed value",
    )

    parser.add_argument(
        "--num_channels",
        type=str,
        default="1,256",
        help="Number of channels range (min,max) or fixed value",
    )

    parser.add_argument(
        "--save_as_single_file",
        action="store_true",
        help="Save all batches in a single file per dataset",
    )

    parser.add_argument(
        "--lmc_proportion",
        type=float,
        default=0.75,
        help="Proportion of batches generated by LMCSynthGenerator (default: 0.75)",
    )

    return parser.parse_args()


def parse_range_or_value(value_str: str):
    """Parse a string as either a range (min,max) or a fixed value."""
    parts = value_str.split(",")
    if len(parts) == 1:
        return int(parts[0])
    elif len(parts) == 2:
        return (int(parts[0]), int(parts[1]))
    else:
        raise ValueError(f"Invalid format: {value_str}. Expected 'value' or 'min,max'")


def main():
    """Main function to generate synthetic datasets."""
    args = parse_args()

    # Parse range arguments
    history_length = parse_range_or_value(args.history_length)
    target_length = parse_range_or_value(args.target_length)
    num_channels = parse_range_or_value(args.num_channels)

    # Validate LMC proportion
    if args.lmc_proportion < 0 or args.lmc_proportion > 1:
        raise ValueError(
            f"LMC proportion must be between 0 and 1, got {args.lmc_proportion}"
        )

    kernel_proportion = 1.0 - args.lmc_proportion

    # Create generator wrappers
    lmc_generator = LMCGeneratorWrapper(
        global_seed=args.seed,
        history_length=history_length,
        target_length=target_length,
        num_channels=num_channels,
    )

    kernel_generator = KernelGeneratorWrapper(
        global_seed=args.seed,
        history_length=history_length,
        target_length=target_length,
        num_channels=num_channels,
    )

    # Create generator proportions dictionary
    generator_proportions = {
        lmc_generator: args.lmc_proportion,
        kernel_generator: kernel_proportion,
    }

    # Create dataset composer
    composer = DatasetComposer(
        generator_proportions=generator_proportions,
        global_seed=args.seed,
    )

    # Create output directory
    os.makedirs(args.output_dir, exist_ok=True)

    # Generate training and validation datasets
    composer.create_train_validation_datasets(
        output_dir=args.output_dir,
        train_batches=args.train_batches,
        val_batches=args.val_batches,
        batch_size=args.batch_size,
        save_as_single_file=args.save_as_single_file,
    )

    logger.info("Dataset generation completed successfully!")


if __name__ == "__main__":
    main()
